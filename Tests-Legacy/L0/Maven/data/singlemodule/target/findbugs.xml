
<BugCollection sequence='0' release='' analysisTimestamp='1473332766159' version='3.0.1' timestamp='1473332763202'><Project projectName='app'><Jar>C:\TestJavaProject\app\target\classes</Jar><SrcDir>C:\TestJavaProject\app\src\main\java</SrcDir><WrkDir>C:\TestJavaProject\app\target</WrkDir></Project><BugInstance instanceOccurrenceNum='0' instanceHash='8ae8fbb0b7fa4194468eb14abcce344d' cweid='563' rank='15' abbrev='DLS' category='STYLE' priority='1' type='DLS_DEAD_LOCAL_STORE' instanceOccurrenceMax='0'><ShortMessage>Dead store to local variable</ShortMessage><LongMessage>Dead store to fis in main.java.TestProgram.TestMethod(String)</LongMessage><Class classname='main.java.TestProgram' primary='true'><SourceLine classname='main.java.TestProgram' start='13' end='34' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java'><Message>At TestProgram.java:[lines 13-34]</Message></SourceLine><Message>In class main.java.TestProgram</Message></Class><Method isStatic='false' classname='main.java.TestProgram' signature='(Ljava/lang/String;)Ljava/lang/String;' name='TestMethod' primary='true'><SourceLine endBytecode='11' classname='main.java.TestProgram' start='21' end='27' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='0'></SourceLine><Message>In method main.java.TestProgram.TestMethod(String)</Message></Method><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='15' name='fis' register='2'><Message>Local variable named fis</Message></LocalVariable><SourceLine endBytecode='9' classname='main.java.TestProgram' start='21' end='21' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='9' primary='true'><Message>At TestProgram.java:[line 21]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.EXCEPTION_HANDLER' value='true'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME' value='fis'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.NO_LOADS' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='49e6b7adfcecce803903ef7383a1c83e' rank='16' abbrev='Nm' category='BAD_PRACTICE' priority='2' type='NM_METHOD_NAMING_CONVENTION' instanceOccurrenceMax='0'><ShortMessage>Method names should start with a lower case letter</ShortMessage><LongMessage>The method name main.java.TestProgram.TestMethod(String) doesn't start with a lower case letter</LongMessage><Class classname='main.java.TestProgram' primary='true'><SourceLine classname='main.java.TestProgram' start='13' end='34' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java'><Message>At TestProgram.java:[lines 13-34]</Message></SourceLine><Message>In class main.java.TestProgram</Message></Class><Method isStatic='false' classname='main.java.TestProgram' signature='(Ljava/lang/String;)Ljava/lang/String;' name='TestMethod' primary='true'><SourceLine endBytecode='102' classname='main.java.TestProgram' start='21' end='27' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='0'></SourceLine><Message>In method main.java.TestProgram.TestMethod(String)</Message></Method><SourceLine synthetic='true' endBytecode='102' classname='main.java.TestProgram' start='21' end='27' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='0'><Message>At TestProgram.java:[lines 21-27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f0e5a4afdd099b55f8157e657eea8043' rank='20' abbrev='OBL' category='EXPERIMENTAL' priority='2' type='OBL_UNSATISFIED_OBLIGATION' instanceOccurrenceMax='0'><ShortMessage>Method may fail to clean up stream or resource</ShortMessage><LongMessage>main.java.TestProgram.TestMethod(String) may fail to clean up java.io.InputStream</LongMessage><Class classname='main.java.TestProgram' primary='true'><SourceLine classname='main.java.TestProgram' start='13' end='34' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java'><Message>At TestProgram.java:[lines 13-34]</Message></SourceLine><Message>In class main.java.TestProgram</Message></Class><Method isStatic='false' classname='main.java.TestProgram' signature='(Ljava/lang/String;)Ljava/lang/String;' name='TestMethod' primary='true'><SourceLine endBytecode='102' classname='main.java.TestProgram' start='21' end='27' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='0'></SourceLine><Message>In method main.java.TestProgram.TestMethod(String)</Message></Method><Class role='CLASS_REFTYPE' classname='java.io.InputStream'><SourceLine classname='java.io.InputStream' start='45' end='364' sourcepath='java/io/InputStream.java' sourcefile='InputStream.java'><Message>At InputStream.java:[lines 45-364]</Message></SourceLine><Message>Reference type java.io.InputStream</Message></Class><Int role='INT_OBLIGATIONS_REMAINING' value='1'><Message>1 instances of obligation remaining</Message></Int><SourceLine role='SOURCE_LINE_OBLIGATION_CREATED' endBytecode='6' classname='main.java.TestProgram' start='21' end='21' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='6' primary='true'><Message>Obligation to clean up resource created at TestProgram.java:[line 21] is not discharged</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='10' classname='main.java.TestProgram' start='22' end='22' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='10'><Message>Path continues at TestProgram.java:[line 22]</Message></SourceLine><String role='STRING_REMAINING_OBLIGATIONS' value='{InputStream x 1}'><Message>Remaining obligations: {InputStream x 1}</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c4e21ad7b4b9926b8b1934295a1987ba' rank='16' abbrev='OS' category='BAD_PRACTICE' priority='2' type='OS_OPEN_STREAM' instanceOccurrenceMax='0'><ShortMessage>Method may fail to close stream</ShortMessage><LongMessage>main.java.TestProgram.TestMethod(String) may fail to close stream</LongMessage><Class classname='main.java.TestProgram' primary='true'><SourceLine classname='main.java.TestProgram' start='13' end='34' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java'><Message>At TestProgram.java:[lines 13-34]</Message></SourceLine><Message>In class main.java.TestProgram</Message></Class><Method isStatic='false' classname='main.java.TestProgram' signature='(Ljava/lang/String;)Ljava/lang/String;' name='TestMethod' primary='true'><SourceLine endBytecode='11' classname='main.java.TestProgram' start='21' end='27' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='0'></SourceLine><Message>In method main.java.TestProgram.TestMethod(String)</Message></Method><Type role='TYPE_CLOSEIT' descriptor='Ljava/io/InputStream;'><SourceLine classname='java.io.InputStream' start='45' end='364' sourcepath='java/io/InputStream.java' sourcefile='InputStream.java'><Message>At InputStream.java:[lines 45-364]</Message></SourceLine><Message>Need to close java.io.InputStream </Message></Type><SourceLine endBytecode='0' classname='main.java.TestProgram' start='21' end='21' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java' startBytecode='0' primary='true'><Message>At TestProgram.java:[line 21]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='4cc0f5889f56dafe9c637a4e50a23557' rank='17' abbrev='UuF' category='STYLE' priority='2' type='UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD' instanceOccurrenceMax='0'><ShortMessage>Unused public or protected field</ShortMessage><LongMessage>Unused public or protected field: main.java.TestProgram.unusedVariable</LongMessage><Class classname='main.java.TestProgram' primary='true'><SourceLine classname='main.java.TestProgram' start='13' end='34' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java'><Message>At TestProgram.java:[lines 13-34]</Message></SourceLine><Message>In class main.java.TestProgram</Message></Class><Field isStatic='false' classname='main.java.TestProgram' signature='Ljava/lang/String;' name='unusedVariable' primary='true'><SourceLine classname='main.java.TestProgram' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java'><Message>In TestProgram.java</Message></SourceLine><Message>Field main.java.TestProgram.unusedVariable</Message></Field><SourceLine synthetic='true' classname='main.java.TestProgram' sourcepath='main/java/TestProgram.java' sourcefile='TestProgram.java'><Message>In TestProgram.java</Message></SourceLine></BugInstance><BugCategory category='BAD_PRACTICE'><Description>Bad practice</Description></BugCategory><BugCategory category='STYLE'><Description>Dodgy code</Description></BugCategory><BugCategory category='EXPERIMENTAL'><Description>Experimental</Description></BugCategory><BugPattern abbrev='DLS' category='STYLE' type='DLS_DEAD_LOCAL_STORE'><ShortDescription>Dead store to local variable</ShortDescription><Details>

    &lt;p&gt;
    This instruction assigns a value to a local variable,
    but the value is not read or used in any subsequent instruction.
    Often, this indicates an error, because the value computed is never
    used.
    &lt;/p&gt;
    &lt;p&gt;
    Note that Sun's javac compiler often generates dead stores for
    final local variables.  Because FindBugs is a bytecode-based tool,
    there is no easy way to eliminate these false positives.
    &lt;/p&gt;

</Details></BugPattern><BugPattern abbrev='UuF' category='STYLE' type='UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD'><ShortDescription>Unused public or protected field</ShortDescription><Details>

    &lt;p&gt; This field is never used.&amp;nbsp;
    The field is public or protected, so perhaps
    it is intended to be used with classes not seen as part of the analysis. If not,
    consider removing it from the class.&lt;/p&gt;

</Details></BugPattern><BugPattern abbrev='Nm' category='BAD_PRACTICE' type='NM_METHOD_NAMING_CONVENTION'><ShortDescription>Method names should start with a lower case letter</ShortDescription><Details>

    &lt;p&gt;
    Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.
    &lt;/p&gt;

</Details></BugPattern><BugPattern abbrev='OBL' category='EXPERIMENTAL' type='OBL_UNSATISFIED_OBLIGATION'><ShortDescription>Method may fail to clean up stream or resource</ShortDescription><Details>

    &lt;p&gt;
    This method may fail to clean up (close, dispose of) a stream,
    database object, or other
    resource requiring an explicit cleanup operation.
    &lt;/p&gt;

    &lt;p&gt;
    In general, if a method opens a stream or other resource,
    the method should use a try/finally block to ensure that
    the stream or resource is cleaned up before the method
    returns.
    &lt;/p&gt;

    &lt;p&gt;
    This bug pattern is essentially the same as the
    OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE
    bug patterns, but is based on a different
    (and hopefully better) static analysis technique.
    We are interested is getting feedback about the
    usefulness of this bug pattern.
    To send feedback, either:
    &lt;/p&gt;
    &lt;ul&gt;
    &lt;li&gt;send email to findbugs@cs.umd.edu&lt;/li&gt;
    &lt;li&gt;file a bug report: &lt;a href="http://findbugs.sourceforge.net/reportingBugs.html"&gt;http://findbugs.sourceforge.net/reportingBugs.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;
    In particular,
    the false-positive suppression heuristics for this
    bug pattern have not been extensively tuned, so
    reports about false positives are helpful to us.
    &lt;/p&gt;

    &lt;p&gt;
    See Weimer and Necula, &lt;i&gt;Finding and Preventing Run-Time Error Handling Mistakes&lt;/i&gt;, for
    a description of the analysis technique.
    &lt;/p&gt;

</Details></BugPattern><BugPattern abbrev='OS' category='BAD_PRACTICE' type='OS_OPEN_STREAM'><ShortDescription>Method may fail to close stream</ShortDescription><Details>

    &lt;p&gt; The method creates an IO stream object, does not assign it to any
    fields, pass it to other methods that might close it,
    or return it, and does not appear to close
    the stream on all paths out of the method.&amp;nbsp; This may result in
    a file descriptor leak.&amp;nbsp; It is generally a good
    idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are
    closed.&lt;/p&gt;

</Details></BugPattern><BugCode abbrev='OS'><Description>Stream not closed on all paths</Description></BugCode><BugCode abbrev='UuF'><Description>Unused field</Description></BugCode><BugCode abbrev='OBL'><Description>Unsatisfied obligation to clean up stream or resource</Description></BugCode><BugCode cweid='563' abbrev='DLS'><Description>Dead local store</Description></BugCode><BugCode abbrev='Nm'><Description>Confusing method name</Description></BugCode><Errors missingClasses='0' errors='0'></Errors><FindBugsSummary num_packages='1' total_classes='2' priority_1='1' priority_2='4' total_size='27' clock_seconds='1.07' referenced_classes='15' vm_version='25.60-b23' total_bugs='5' java_version='1.8.0_60' gc_seconds='0.01' alloc_mbytes='491.00' cpu_seconds='4.69' peak_mbytes='169.54' timestamp='Thu, 8 Sep 2016 12:06:03 +0100'><FileStats path='main/java/TestClassWithErrors.java' size='8' bugCount='0'></FileStats><FileStats path='main/java/TestProgram.java' size='19' bugHash='0d7d7ff7f4cd490aa22d0c1ca686118e' bugCount='5'></FileStats><PackageStats package='main.java' priority_1='1' total_bugs='5' priority_2='4' total_size='27' total_types='2'><ClassStats bugs='0' size='8' interface='false' sourceFile='TestClassWithErrors.java' class='main.java.TestClassWithErrors'></ClassStats><ClassStats bugs='5' size='19' priority_1='1' priority_2='4' interface='false' sourceFile='TestProgram.java' class='main.java.TestProgram'></ClassStats></PackageStats><FindBugsProfile><ClassProfile avgMicrosecondsPerInvocation='434' totalMilliseconds='148' name='edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine' standardDeviationMircosecondsPerInvocation='929' maxMicrosecondsPerInvocation='12314' invocations='342'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='412' totalMilliseconds='141' name='edu.umd.cs.findbugs.classfile.engine.ClassDataAnalysisEngine' standardDeviationMircosecondsPerInvocation='171' maxMicrosecondsPerInvocation='1068' invocations='343'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='3832' totalMilliseconds='57' name='edu.umd.cs.findbugs.detect.FieldItemSummary' standardDeviationMircosecondsPerInvocation='5669' maxMicrosecondsPerInvocation='19218' invocations='15'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='98' totalMilliseconds='30' name='edu.umd.cs.findbugs.util.TopologicalSort' standardDeviationMircosecondsPerInvocation='168' maxMicrosecondsPerInvocation='1181' invocations='310'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='447' totalMilliseconds='28' name='edu.umd.cs.findbugs.OpcodeStack$JumpInfoFactory' standardDeviationMircosecondsPerInvocation='596' maxMicrosecondsPerInvocation='3766' invocations='63'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='5327' totalMilliseconds='26' name='edu.umd.cs.findbugs.classfile.engine.bcel.MethodGenFactory' standardDeviationMircosecondsPerInvocation='9996' maxMicrosecondsPerInvocation='25320' invocations='5'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1654' totalMilliseconds='24' name='edu.umd.cs.findbugs.detect.FindNoSideEffectMethods' standardDeviationMircosecondsPerInvocation='1915' maxMicrosecondsPerInvocation='6480' invocations='15'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='758' totalMilliseconds='22' name='edu.umd.cs.findbugs.classfile.engine.bcel.JavaClassAnalysisEngine' standardDeviationMircosecondsPerInvocation='2248' maxMicrosecondsPerInvocation='12268' invocations='30'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1265' totalMilliseconds='18' name='edu.umd.cs.findbugs.detect.NoteDirectlyRelevantTypeQualifiers' standardDeviationMircosecondsPerInvocation='2051' maxMicrosecondsPerInvocation='8098' invocations='15'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1076' totalMilliseconds='16' name='edu.umd.cs.findbugs.detect.OverridingEqualsNotSymmetrical' standardDeviationMircosecondsPerInvocation='2606' maxMicrosecondsPerInvocation='10653' invocations='15'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1054' totalMilliseconds='15' name='edu.umd.cs.findbugs.detect.FunctionsThatMightBeMistakenForProcedures' standardDeviationMircosecondsPerInvocation='1555' maxMicrosecondsPerInvocation='5352' invocations='15'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='7097' totalMilliseconds='14' name='edu.umd.cs.findbugs.detect.FindDeadLocalStores' standardDeviationMircosecondsPerInvocation='6387' maxMicrosecondsPerInvocation='13484' invocations='2'></ClassProfile></FindBugsProfile></FindBugsSummary><ClassFeatures></ClassFeatures><History></History></BugCollection>